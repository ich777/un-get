#!/bin/bash
set -f

# Get installed packages
# remove lines which are empty and which has no numbers in it <- possible plugin packages
INSTALLED_PKGS="$(ls -1 /var/log/packages/)"

download_checksums() {
  echo "Please wait obtaining checksums from repository $2..."
  if wget -q --show-progress --progress=dot:mega -O /tmp/un-get/checksums-${2} "${1}/CHECKSUMS.md5" ; then
    echo "Checksums from repository $2 successfully downloaded!"
    if [ -f /tmp/un-get/filelist-${2}.old ]; then
      rm -f /tmp/un-get/filelist-${2}.old /tmp/un-get/checksums-${2}.old
    fi
  else
    rm -f /tmp/un-get/filelist-${2}
    rm -f /tmp/un-get/checksums-${2}
    if [ -f /tmp/un-get/filelist-${2}.old ]; then
      echo "Can't fetch package list from repository $2, restoring old list, please try again later...!"
      mv /tmp/un-get/filelist-${2}.old /tmp/un-get/filelist-${2}
      mv /tmp/un-get/checksums-${2}.old /tmp/un-get/checksums-${2}
    else
      echo "Can't fetch checksums from repository $2, please try again later...!"
    fi
  fi
}

download_filelist() {
  echo "Please wait obtaining package list from repository $2..."
  if wget -q --show-progress --progress=dot:mega -O /tmp/un-get/filelist-${2} "${1}/FILE_LIST" ; then
    echo "Package list from repository $2 successfully downloaded!"
    echo
    download_checksums "$1" "$2"
  else
    # Workaround from repositories which use 'FILELIST.TXT' instead of 'FILE_LIST' eg. Conraids repository
    if wget -q --show-progress --progress=dot:mega -O /tmp/un-get/filelist-${2} "${1}/FILELIST.TXT" ; then
      echo "Package list from repository $2 successfully downloaded!"
      echo
      download_checksums "$1" "$2"
    else
      rm -f /tmp/un-get/filelist-${2}
      if [ -f /tmp/un-get/filelist-${2}.old ]; then
        echo "Can't fetch package list, restoring old list, please try again later...!"
        mv /tmp/un-get/filelist-${2}.old /tmp/un-get/filelist-${2}
        mv /tmp/un-get/checksums-${2}.old /tmp/un-get/checksums-${2}
      else
        echo "Can't fetch package list from repository $2, please try again later...!"
      fi
    fi
  fi
}

update() {
# Create folder if non exists
if [ ! -d /tmp/un-get ]; then
  mkdir -p /tmp/un-get
fi

# Check for sources.list file
# Read sources.list file and download packagelists
while read source; do
  if [ "${source::1}" != "#" ]; then
    download_filelist "${source% *}" "${source##* }"
    if [ -z "${SOURCES}" ]; then
      SOURCES="${source##* }"
    else
      SOURCES="${SOURCES}|${source##* }"
    fi
  fi
done <<< "$(cat /boot/config/plugins/un-get/sources.list | sed '/^$/d')"
if [ ! -z ${SOURCES} ]; then
  rm -f $(find /tmp/un-get/ -type f | grep -Ev "${SOURCES}")
fi
}

download_package() {
  if [ ! -d /boot/extra ]; then
    mkdir -p /boot/extra
  fi
  if [ ! -f /boot/config/plugins/un-get/installedpackages_list ]; then
    touch /boot/config/plugins/un-get/installedpackages_list
  fi
  if wget -q --show-progress --progress=dot:mega -O /boot/extra/${3##*/} "${2}/$3" ; then
    if [ ! "$(grep "${3##*/}" /boot/config/plugins/un-get/installedpackages_list)" ]; then
      echo "${3##*/}" >> /boot/config/plugins/un-get/installedpackages_list
    fi
  else
    rm -f /boot/extra/${3##*/} 2>/dev/null
    echo $3
    echo "Can't download package $1, please try again later...!"
    exit 1
  fi
}

install_package() {
  if [ "$(grep "^$1" /boot/config/plugins/un-get/installedpackages_list)" ]; then
    if [ "$(grep "${1%.*}" <<< "${INSTALLED_PKGS}")" ]; then
      echo "Package $1 already installed, skipping!"
    else
      if [ "$(cat /tmp/un-get/checksums-${2} | grep -w "$1" | grep -E ".tbz|.tlz|.tgz|.txz" | grep -v -E ".*\.asc|.*\.md5|.*\.sha256" | awk '{print $1}')" == "$(md5sum /boot/extra/$1 | awk '{print $1}')" ]; then
        upgradepkg --install-new /boot/extra/$1
      else
        echo "Checksum error, please try to reinstall the package again!"
        rm /boot/extra/$1 2>/dev/null
        sed -i "/$1/d" /boot/config/plugins/un-get/installedpackages_list
      fi
    fi
  else
    echo "Something went wrong, package $1 not found"
  fi
}

upgrade_package() {
  OLD_PKG="$(ls -1 /boot/extra/ | grep "^$1-[0-9]")"
  sed -i "/$1/d" /boot/config/plugins/un-get/installedpackages_list
  if wget -q --show-progress --progress=dot:mega -O /boot/extra/${3##*/} "${2}/$3" ; then
    sed -i "/$1/d" /boot/config/plugins/un-get/installedpackages_list
    rm -f /boot/extra/${OLD_PKG} 2>/dev/null
    echo "${3##*/}" >> /boot/config/plugins/un-get/installedpackages_list
  else
    rm -f /boot/extra/${3##*/} 2>/dev/null
    echo "Can't download package $1, please try again later...!"
    exit 1
  fi
}

force_upgrade_package() {
  OLD_PKG="$(ls -1 /boot/extra/ | grep "^$1-[0-9]")"
  mv /boot/extra/${OLD_PKG} /tmp/un-get_temp/ 2>/dev/null
  sed -i "/$1/d" /boot/config/plugins/un-get/installedpackages_list
  if wget -q --show-progress --progress=dot:mega -O /boot/extra/${3##*/} "${2}/$3" ; then
    sed -i "/$1/d" /boot/config/plugins/un-get/installedpackages_list
    rm -f /tmp/un-get_temp/${OLD_PKG}
    echo "${3##*/}" >> /boot/config/plugins/un-get/installedpackages_list
  else
    rm -f /boot/extra/${3##*/} 2>/dev/null
    echo "Can't download package $1, please try again later...!"
    echo "Restoring old package ${OLD_PKG} to /boot/extra...!"
    mv /tmp/un-get_temp/${OLD_PKG} /boot/extra/ 2>/dev/null
    exit 1
  fi
}

remove_package() {
  removepkg "$(grep "^$1-[0-9]" <<< "${INSTALLED_PKGS}")"
  rm -f /boot/extra/$(ls -1 /boot/extra/ | grep "^$1-[0-9]") 2>/dev/null
  sed -i "/$1/d" /boot/config/plugins/un-get/installedpackages_list
}

list_installed() {
  if [ ! "$(find /boot/config/plugins/un-get/ -empty -name "installedpackages_list")" ] && [ -f /boot/config/plugins/un-get/installedpackages_list ]; then
    echo "Currently installed package(s) by un-get:"
    cat /boot/config/plugins/un-get/installedpackages_list
  else
    echo "No packages which are installed by un-get found!"
  fi
}

package_list_check() {
  if [ ! "$(find /tmp/un-get/ -name 'filelist-*' 2>/dev/null)" ]; then
    echo "Please run 'un-get update' first!"
    exit 1
  fi
}

package_installed_check() {
  if [ "$(echo "$INSTALLED_PKGS" | grep "^$1-[0-9]")" ]; then
    return 0
  else
    return 1
  fi
}

package_available_check() {
  if [ "$(echo "$PACKAGES_AVAILABLE" | grep "/$1-[0-9]")" ]; then
    return 0
  else
    return 1
  fi
}

package_installed_list_check() {
  if [ "$(echo "$PACKAGE_LIST_INSTALLED" | grep "^$1-[0-9]")" ]; then
    return 0
  else
    return 1
  fi
}

search() {
  PACKAGE_SEARCH="$(cat $(find /tmp/un-get/ -type f -name 'filelist-*') | grep -i "$1" | awk '{print $NF}' | grep -E ".tbz|.tlz|.tgz|.txz" | grep -v -E ".*\.asc|.*\.md5|.*\.sha256" | rev | cut -d '/' -f1 | rev)"
  if [ ! -z "${PACKAGE_SEARCH}" ]; then
    echo "Please wait, performing search..."
    for p in ${PACKAGE_SEARCH}
    do
      PACKAGE="$(echo ${p%-*-*})"
      package_installed_check "${PACKAGE%-*}"
      if [ "$?" == 0 ]; then
        if [ ! -z "${INSTALLED}" ]; then
          INSTALLED="${INSTALLED} ${PACKAGE%-*}"
        else
	        INSTALLED="${PACKAGE%-*}"
        fi
      else
        if [ ! -z "${NOT_INSTALLED}" ]; then
          NOT_INSTALLED="${NOT_INSTALLED} ${PACKAGE}"
        else
          NOT_INSTALLED="${PACKAGE}"
        fi
      fi
    done
    if [ ! -z "${NOT_INSTALLED}" ]; then
      echo "Found the following package(s) for your search '$1' in repositories:"
      echo "${NOT_INSTALLED// /$'\n'}"
      if [ ! -z "${INSTALLED}" ]; then
        echo
      fi
    fi
    if [ ! -z "${INSTALLED}" ]; then
      echo "Found the following installed package(s) already installed on your"
      echo "system which are not qualifying for reinstall through un-get:"
      INSTALLED="${INSTALLED// /$'\n'}"
      echo "$(awk '!seen[$0]++' <<< "${INSTALLED}")"
    fi
    exit 0
  else
    echo "Found no packages matching your search '$1'."
    exit 1
  fi
}

install() {
  PACKAGES_AVAILABLE="$(cat $(find /tmp/un-get/ -type f -name 'filelist-*') | awk '{print $NF}' | grep -E ".tbz|.tlz|.tgz|.txz" | grep -v -E ".*\.asc|.*\.md5|.*\.sha256" | cut -d '.' -f1- | grep -E ".tbz|.tlz|.tgz|.txz" | grep -v -E ".*\.asc|.*\.md5|.*\.sha256")"
  for p in $@
  do
    package_available_check $p
    if [ "$?" == 0 ]; then
      package_installed_check $p
      if [ "$?" == 0 ]; then
        echo "Package $p is already installed on your system! ABORT!"
        exit 1
      fi
      if [ ! -z "${PACKAGE_LIST}" ]; then
        PACKAGE_LIST="${PACKAGE_LIST} $p"
      else
        PACKAGE_LIST="$p"
      fi
    else
      if [ ! -z "${FAILED_LIST}" ]; then
        FAILED_LIST="${FAILED_LIST} $p"
      else
        FAILED_LIST="$p"
      fi
    fi
  done
  if [ -z "${FAILED_LIST}" ]; then
    echo "The following package(s) will be installed: ${PACKAGE_LIST}"
    read -r -p "Are you sure? [y/N] " response
    response=${response,,}
    if [[ "$response" =~ ^(yes|y)$ ]]; then
      for p in ${PACKAGE_LIST}
      do
        LAT_V="$(grep -R -H -i -w "$p-[0-9a-zA-Z_]\+" /tmp/un-get/ | awk '{print $1, $NF}' | grep -E ".tbz|.tlz|.tgz|.txz" | grep -v -E ".*\.asc|.*\.md5|.*\.sha256"  | rev | cut -d '/' -f1 | rev | grep "^$p-[0-9]\+" | sort -V | tail -1)"
        PACKAGE="$(grep -R -H -i -w "$LAT_V" /tmp/un-get/ | awk '{print $1, $NF}' | grep -E ".tbz|.tlz|.tgz|.txz" | grep -v -E ".*\.asc|.*\.md5|.*\.sha256" | cut -d '.' -f1- | sort -V | tail -1)"
        TOP_URL="$(awk '{print $2}' <<< ${PACKAGE} | sed 's/^[.]//')"
        REPO_LINE="$(awk '{print $2}' /boot/config/plugins/un-get/sources.list | grep -n "$(awk '{print $1}' <<< "${PACKAGE}" | cut -d ':' -f1 | sed 's:.*-::' | sort -V | tail -1)" | grep -vE '^[0-9]+:(http://|https://|ftp://|ftps://|www.|ftp.)' | cut -d ':' -f1)"
        URL="$(awk -v line=$REPO_LINE 'NR==line' /boot/config/plugins/un-get/sources.list | awk '{print $1}' | sed 's:/*$::')"
        download_package "$p" "${URL}" "${TOP_URL}"
      done
      for p in ${PACKAGE_LIST}
      do
        LAT_V="$(grep -R -H -i -w "$p-[0-9a-zA-Z_]\+" /tmp/un-get/ | awk '{print $1, $NF}' | grep -E ".tbz|.tlz|.tgz|.txz" | grep -v -E ".*\.asc|.*\.md5|.*\.sha256"  | rev | cut -d '/' -f1 | rev | grep "^$p-[0-9]\+" | sort -V | tail -1)"
        PACKAGE="$(grep -R -H -i -w "$LAT_V" /tmp/un-get/ | awk '{print $1, $NF}' | grep -E ".tbz|.tlz|.tgz|.txz" | grep -v -E ".*\.asc|.*\.md5|.*\.sha256" | cut -d '.' -f1- | sort -V | tail -1)"
        TOP_URL="$(awk '{print $2}' <<< ${PACKAGE} | sed 's/^[.]//')"
        REPO_LINE="$(awk '{print $2}' /boot/config/plugins/un-get/sources.list | grep -n "$(awk '{print $1}' <<< "${PACKAGE}" | cut -d ':' -f1 | sed 's:.*-::' | sort -V | tail -1)" | grep -vE '^[0-9]+:(http://|https://|ftp://|ftps://|www.|ftp.)' | cut -d ':' -f1)"
        REPO="$(awk -v line=$REPO_LINE 'NR==line' /boot/config/plugins/un-get/sources.list | awk '{print $2}')"
        PACKAGE_NAME="$(grep "/$p-[0-9]" <<< "${PACKAGES_AVAILABLE}" | grep "${TOP_URL}" | sort -V | tail -1)"
        install_package "${PACKAGE_NAME##*/}" "${REPO}"
      done
    else
      echo "Abort!"
      exit 1
    fi
  else
    echo "Can't find package(s): ${FAILED_LIST// /, }!"
    exit 1
  fi
}

upgrade() {
  if [ ! "$(find /boot/config/plugins/un-get/ -empty -name "installedpackages_list")" ] && [ -f /boot/config/plugins/un-get/installedpackages_list ]; then
    INSTALLED_PACKAGES="$(cat /boot/config/plugins/un-get/installedpackages_list)"
    PACKAGES_AVAILABLE="$(grep -R "" /tmp/un-get/ | awk '{print $1, $NF}' | grep -E ".tbz|.tlz|.tgz|.txz" | grep -v -E ".*\.asc|.*\.md5|.*\.sha256" | cut -d '.' -f1-)"
    for p in ${INSTALLED_PACKAGES}
    do
      AVAIL_V="$(grep -w "${p%-*-*-*}-[0-9]" <<< $PACKAGES_AVAILABLE)"
      SORT_V="$(echo "$AVAIL_V" | rev | cut -d '/' -f1 | rev | sort -V | tail -1)"
      COMPARE="${SORT_V##*/}
${p}"
      SORTED="$(sort -V <<< "$COMPARE" | tail -1)"
      if [ "${p}" != "${SORTED}" ]; then
       if [ ! -z "${UPGRADE_PACKAGES}" ]; then
          UPGRADE_PACKAGES="${UPGRADE_PACKAGES} ${SORTED%-*-*-*}"
        else
	        UPGRADE_PACKAGES="${SORTED%-*-*-*}"
        fi
      fi
    done
    if [ "${1}" == "force" ]; then
      INSTALLED_PACKAGES="$(cat /boot/config/plugins/un-get/installedpackages_list)"
      PACKAGES_AVAILABLE="$(grep -R "" /tmp/un-get/ | awk '{print $1, $NF}' | grep -E ".tbz|.tlz|.tgz|.txz" | grep -v -E ".*\.asc|.*\.md5|.*\.sha256" | cut -d '.' -f1-)"
      for p in ${INSTALLED_PACKAGES}
      do
        AVAIL_V="$(grep -w "${p%-*-*-*}-[0-9]" <<< $PACKAGES_AVAILABLE)"
        SORT_V="$(echo "$AVAIL_V" | rev | cut -d '/' -f1 | rev | sort -V | tail -1)"
        if [ -z "${SORT_V}" ]; then
          if [ ! -z "${NOT_FOUND}" ]; then
            NOT_FOUND="${NOT_FOUND} ${p%-*-*-*}"
          else
            NOT_FOUND="${p%-*-*-*}"
          fi
        elif [ ! -z "${UPGRADE_PACKAGES}" ]; then
          UPGRADE_PACKAGES="${UPGRADE_PACKAGES} ${SORT_V%-*-*-*}"
        else
  	      UPGRADE_PACKAGES="${SORT_V%-*-*-*}"
        fi
      done
      echo "Following packages will be force upgraded and installed on next boot:"
      echo "${UPGRADE_PACKAGES// /, }"
      if [ ! -z "${NOT_FOUND}" ]; then
        echo
        echo "ATTENTION"
        echo "The following packages could not be found and will be removed now"
        echo "after confirmation: ${NOT_FOUND// /, }"
        echo
      fi
      read -r -p "Are you sure? [y/N] " response
      response=${response,,}
      if [[ "$response" =~ ^(yes|y)$ ]]; then
        if [ ! -d /tmp/un-get_temp ]; then
          mkdir -p /tmp/un-get_temp
        fi
        for p in ${UPGRADE_PACKAGES}
        do
          LAT_V="$(grep -R -H -i -w "$p-[0-9a-zA-Z_]\+" /tmp/un-get/ | awk '{print $1, $NF}' | grep -E ".tbz|.tlz|.tgz|.txz" | grep -v -E ".*\.asc|.*\.md5|.*\.sha256"  | rev | cut -d '/' -f1 | rev | grep "^$p-[0-9]\+" | sort -V | tail -1)"
          PACKAGE="$(grep -R -H -i -w "$LAT_V" /tmp/un-get/ | awk '{print $1, $NF}' | grep -E ".tbz|.tlz|.tgz|.txz" | grep -v -E ".*\.asc|.*\.md5|.*\.sha256" | cut -d '.' -f1- | sort -V | tail -1)"
          TOP_URL="$(awk '{print $2}' <<< ${PACKAGE} | sed 's/^[.]//')"
          REPO_LINE="$(awk '{print $2}' /boot/config/plugins/un-get/sources.list | grep -n "$(awk '{print $1}' <<< "${PACKAGE}" | cut -d ':' -f1 | sed 's:.*-::' | sort -V | tail -1)" | grep -vE '^[0-9]+:(http://|https://|ftp://|ftps://|www.|ftp.)' | cut -d ':' -f1)"
          URL="$(awk -v line=$REPO_LINE 'NR==line' /boot/config/plugins/un-get/sources.list | awk '{print $1}' | sed 's:/*$::')"
          force_upgrade_package "$p" "${URL}" "${TOP_URL}"
        done
        if [ ! -z "${NOT_FOUND}" ]; then
          for p in ${NOT_FOUND}
          do
            remove_package "$p"
          done
        fi
        rm -rf /tmp/un-get_temp
        echo
        echo "Please reboot your system to install the upgraded packages!"
      else
        echo "Abort!"
        exit 1
      fi
    elif [ ! -z "${UPGRADE_PACKAGES}" ]; then
      echo "Following packages will be upgraded: ${UPGRADE_PACKAGES// /, }"
      read -r -p "Are you sure? [y/N] " response
      response=${response,,}
      if [[ "$response" =~ ^(yes|y)$ ]]; then
        for p in ${UPGRADE_PACKAGES}
        do
          LAT_V="$(grep -R -H -i -w "$p-[0-9a-zA-Z_]\+" /tmp/un-get/ | awk '{print $1, $NF}' | grep -E ".tbz|.tlz|.tgz|.txz" | grep -v -E ".*\.asc|.*\.md5|.*\.sha256"  | rev | cut -d '/' -f1 | rev | grep "^$p-[0-9]\+" | sort -V | tail -1)"
          PACKAGE="$(grep -R -H -i -w "$LAT_V" /tmp/un-get/ | awk '{print $1, $NF}' | grep -E ".tbz|.tlz|.tgz|.txz" | grep -v -E ".*\.asc|.*\.md5|.*\.sha256" | cut -d '.' -f1- | sort -V | tail -1)"
          TOP_URL="$(awk '{print $2}' <<< ${PACKAGE} | sed 's/^[.]//')"
          REPO_LINE="$(awk '{print $2}' /boot/config/plugins/un-get/sources.list | grep -n "$(awk '{print $1}' <<< "${PACKAGE}" | cut -d ':' -f1 | sed 's:.*-::' | sort -V | tail -1)" | grep -vE '^[0-9]+:(http://|https://|ftp://|ftps://|www.|ftp.)' | cut -d ':' -f1)"
          URL="$(awk -v line=$REPO_LINE 'NR==line' /boot/config/plugins/un-get/sources.list | awk '{print $1}' | sed 's:/*$::')"
          upgrade_package "$p" "${URL}" "${TOP_URL}"
        done
        for p in ${UPGRADE_PACKAGES}
        do
          LAT_V="$(grep -R -H -i -w "$p-[0-9a-zA-Z_]\+" /tmp/un-get/ | awk '{print $1, $NF}' | grep -E ".tbz|.tlz|.tgz|.txz" | grep -v -E ".*\.asc|.*\.md5|.*\.sha256"  | rev | cut -d '/' -f1 | rev | grep "^$p-[0-9]\+" | sort -V | tail -1)"
          PACKAGE="$(grep -R -H -i -w "$LAT_V" /tmp/un-get/ | awk '{print $1, $NF}' | grep -E ".tbz|.tlz|.tgz|.txz" | grep -v -E ".*\.asc|.*\.md5|.*\.sha256" | cut -d '.' -f1- | sort -V | tail -1)"
          TOP_URL="$(awk '{print $2}' <<< ${PACKAGE} | sed 's/^[.]//')"
          REPO_LINE="$(awk '{print $2}' /boot/config/plugins/un-get/sources.list | grep -n "$(awk '{print $1}' <<< "${PACKAGE}" | cut -d ':' -f1 | sed 's:.*-::' | sort -V | tail -1)" | grep -vE '^[0-9]+:(http://|https://|ftp://|ftps://|www.|ftp.)' | cut -d ':' -f1)"
          REPO="$(awk -v line=$REPO_LINE 'NR==line' /boot/config/plugins/un-get/sources.list | awk '{print $2}')"
          PACKAGE_NAME="$(grep "/$p-[0-9]" <<< "${PACKAGES_AVAILABLE}" | grep "${TOP_URL}" | sort -V | tail -1)"
          install_package "${PACKAGE_NAME##*/}" "${REPO}"
        done
      else
        echo "Abort!"
        exit 1
      fi
    else
      echo "All your installed packages through un-get are up-to-date!"
    fi
  else
    echo "Nothing to upgrade, no packages which are installed by un-get found!"
  fi 
}

remove() {
  PACKAGE_LIST_INSTALLED="$(cat /boot/config/plugins/un-get/installedpackages_list)"
  for p in $@
  do
    package_installed_list_check $p
    if [ "$?" == 0 ]; then
      if [ ! -z "${PACKAGE_LIST}" ]; then
        PACKAGE_LIST="${PACKAGE_LIST} $p"
      else
	PACKAGE_LIST="$p"
      fi
    else
      if [ ! -z "${FAILED_LIST}" ]; then
        FAILED_LIST="${FAILED_LIST} $p"
      else
        FAILED_LIST="$p"
      fi
    fi
  done
  if [ -z "${FAILED_LIST}" ]; then
    echo "The following package(s) will be removed: ${PACKAGE_LIST}"
    read -r -p "Are you sure? [y/N] " response
    response=${response,,}
    if [[ "$response" =~ ^(yes|y)$ ]]; then
      for p in ${PACKAGE_LIST}
      do
        remove_package "$p"
      done
    else
      echo "Abort!"
      exit 1
    fi
  else
    echo "Can't find any package(s) named: ${FAILED_LIST// /, } installed by un-get!"
    exit 1
  fi
}

cleanup() {
  BOOT_PKGS="$(ls -1 /boot/extra/)"
  PACKAGE_LIST_INSTALLED="$(cat /boot/config/plugins/un-get/installedpackages_list)"
  for p in ${BOOT_PKGS}
  do
    if [ $(grep "${p%.*}" <<< "${INSTALLED_PKGS}" | wc -l) -eq 0 ]; then
      if [ -z "${CLEANUP_LIST}" ]; then
        CLEANUP_LIST="${p}"
      else
        CLEANUP_LIST="${CLEANUP_LIST} ${p}"
      fi
    fi
  done
  if [ ! -z "${CLEANUP_LIST}" ]; then
    echo "Found the following package(s) which can be cleaned up:"
    echo "${CLEANUP_LIST// /, }"
    echo
    echo "This will will delete the above listed package(s) from '/boot/extra'"
    read -r -p "Are you sure? [y/N] " response
    response=${response,,}
    if [[ "$response" =~ ^(yes|y)$ ]]; then
      cd /boot/extra
      rm -f ${CLEANUP_LIST}
    fi
    echo
    echo "Please wait, checking if package list is up-to-date...!"
    for p in ${PACKAGE_LIST_INSTALLED}
    do
      if [ $(grep "${p%.*}" <<< "${INSTALLED_PKGS}" | wc -l) -eq 0 ]; then
        sed -i "/$p/d" /boot/config/plugins/un-get/installedpackages_list
      fi
    done
    echo "Done!"
  else
    echo "Nothing to clean up!"
  fi
}

usage_general() {
  echo "Slackware package installation tool for unRAID."
  echo
  echo "un-get is a package download and installation tool"
  echo "for unRAID for Slackware package repositories."
  echo
  echo "Most used commands are:"
  echo "  update    - Updates the packages list locally"
  echo "  install   - Downloads and installs packages"
  echo "  upgrade   - Upgrades packages installed by un-get"
  echo "              Adding '--force' or '-f' will force an upgrade from all"
  echo "              packages, the packages will be installed after a reboot."
  echo "              This comes in handy if the repository is switched."
  echo "              Missing packages from the new repository will be removed"
  echo "              immediately after confirming the force upgrade!"
  echo "  remove    - Removes packages installed by un-get"
  echo "  search    - Searches for available packages"
  echo "  installed - Lists all packages installed by un-get"
  echo "  cleanup   - Will remove all packages/files in the '/boot/extra' directory"
  echo "              which are currently not installed on your server, regardless"
  echo "              if they were installed through un-get or not"
  echo "              ATTENTION: This will delete files which are not packages too"
  echo
  echo "Example usages:"
  echo "  un-get update"
  echo "  un-get search python"
  echo "  un-get install python3 python-pip"
  echo "  un-get remove python3 python-pip"
  echo "  un-get installed"
  echo "  un-get upgrade"
  echo "  un-get upgrade --force"
  echo "  un-get cleanup"
  echo
  echo "Written by Christoph Hummer for unRAID."
  exit 0
}

usage_search() {
  echo "Usage example:"
  echo "  un-get search python3"
  echo
  echo "Search only accepts one package at a time!"
  echo "You don't have to specify wildcards!"
  exit 0
}

usage_install() {
  echo "Usage example:"
  echo "  un-get install python3"
  echo "  un-get install python-pip python-setuptools"
  exit 0
}

usage_remove() {
  echo "Usage example:"
  echo "  un-get remove python3"
  echo "  un-get remove python-pip python-setuptools"
  exit 0
}

version() {
  echo "Written by Christoph Hummer for unRAID."
  echo "$(grep "^Version: " /usr/local/emhttp/plugins/un-get/changelog | sort -V | tail -1)"
  echo "$(grep "^Date: " /usr/local/emhttp/plugins/un-get/changelog | sort -V | tail -1)"
  echo "Dual-licensed under MIT or UNLICENSE."
  exit 0
}

changelog() {
cat /usr/local/emhttp/plugins/un-get/changelog
}

if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
  usage_general
  exit 0
elif [ "$1" == "-v" ] || [ "$1" == "--version" ]; then
  version
  exit 0
elif [ "$1" == "install" ]; then
  package_list_check
  if [ $(expr $# - 1) -lt 1 ]; then
    usage_install
    exit 1
  elif [ "$(echo "${@:2}" | tr -dc '[:alnum:]\n\r')" == "pkgget" ]; then
    usage_install
    exit 1
  else
    install "${@:2}"
  fi
elif [ "$1" == "remove" ]; then
  if [ $(expr $# - 1) -lt 1 ]; then
    usage_remove
    exit 1
  elif [ "$(echo "${@:2}" | tr -dc '[:alnum:]\n\r')" == "pkgget" ]; then
    usage_remove
    exit 1
  else
    remove "${@:2}"
  fi
elif [ "$1" == "search" ]; then
  package_list_check
  if [ $(expr $# - 1) -lt 1 ]; then
    usage_search
    exit 1
  elif [ $(expr $# - 1) -gt 1 ]; then
    usage_search
    exit 1
  elif [ "$(echo "${@:2}" | tr -dc '[:alnum:]\n\r')" == "pkgget" ]; then
    usage_search
    exit 1
  else
    search "${@:2}"
  fi
elif [ "$1" == "installed" ]; then
  list_installed
elif [ "$1" == "upgrade" ] && [ "$2" == "--force" ] || [ "$2" == "-f" ]; then
  package_list_check
  upgrade "force"
elif [ "$1" == "upgrade" ]; then
  package_list_check
  upgrade
elif [ "$1" == "update" ]; then
  update
elif [ "$1" == "cleanup" ]; then
  cleanup
elif [ "$1" == "changelog" ]; then
  changelog
elif [ -z "$1" ]; then
  usage_general
  exit 1
else
  usage_general
  exit 1
fi
